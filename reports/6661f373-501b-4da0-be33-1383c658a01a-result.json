{"name": "test_authorization_correct_data", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=140.0.7339.81)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7d928fc95+79861]\n\tGetHandleVerifier [0x0x7ff7d928fcf0+79952]\n\t(No symbol) [0x0x7ff7d900cada]\n\t(No symbol) [0x0x7ff7d90097e1]\n\t(No symbol) [0x0x7ff7d8ffa339]\n\t(No symbol) [0x0x7ff7d8ffc111]\n\t(No symbol) [0x0x7ff7d8ffa656]\n\t(No symbol) [0x0x7ff7d8ffa0a7]\n\t(No symbol) [0x0x7ff7d8ff9d6b]\n\t(No symbol) [0x0x7ff7d8ff78dc]\n\t(No symbol) [0x0x7ff7d8ff816c]\n\t(No symbol) [0x0x7ff7d9010baa]\n\t(No symbol) [0x0x7ff7d90b5d6e]\n\t(No symbol) [0x0x7ff7d908cada]\n\t(No symbol) [0x0x7ff7d90b4f8b]\n\t(No symbol) [0x0x7ff7d908c8b3]\n\t(No symbol) [0x0x7ff7d9055272]\n\t(No symbol) [0x0x7ff7d9056043]\n\tGetHandleVerifier [0x0x7ff7d954b9cd+2946349]\n\tGetHandleVerifier [0x0x7ff7d9545c4a+2922410]\n\tGetHandleVerifier [0x0x7ff7d95659d7+3052855]\n\tGetHandleVerifier [0x0x7ff7d92aaa7e+189918]\n\tGetHandleVerifier [0x0x7ff7d92b2a1f+222591]\n\tGetHandleVerifier [0x0x7ff7d9298ab4+116244]\n\tGetHandleVerifier [0x0x7ff7d9298c69+116681]\n\tGetHandleVerifier [0x0x7ff7d927f048+11176]\n\tBaseThreadInitThunk [0x0x7ffd3c1be8d7+23]\n\tRtlUserThreadStart [0x0x7ffd3dadc34c+44]", "trace": "self = <tests.test_login_page.TestsLoginPagePositive object at 0x000001D52ADE8CD0>, set_up = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b2625fe37a25e5652739d77dde063e1f\")>\n\n    @allure.description('Authorization with correct data and minimum length username')\n    def test_authorization_correct_data(self, set_up):\n        driver = set_up\n        login_page = LoginPage(driver)\n        dashboard_page = DashboardPage(driver)\n    \n>       login_page.open_login_page()\n\ntests\\test_login_page.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\login_page.py:64: in open_login_page\n    self.open_url(Links.LOGIN_PAGE)\nbase\\base.py:26: in open_url\n    return self.driver.get(url)\n           ^^^^^^^^^^^^^^^^^^^^\n.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:483: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D52ADBEA50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...ff7d927f048+11176]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffd3c1be8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffd3dadc34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=140.0.7339.81)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7d928fc95+79861]\nE       \tGetHandleVerifier [0x0x7ff7d928fcf0+79952]\nE       \t(No symbol) [0x0x7ff7d900cada]\nE       \t(No symbol) [0x0x7ff7d90097e1]\nE       \t(No symbol) [0x0x7ff7d8ffa339]\nE       \t(No symbol) [0x0x7ff7d8ffc111]\nE       \t(No symbol) [0x0x7ff7d8ffa656]\nE       \t(No symbol) [0x0x7ff7d8ffa0a7]\nE       \t(No symbol) [0x0x7ff7d8ff9d6b]\nE       \t(No symbol) [0x0x7ff7d8ff78dc]\nE       \t(No symbol) [0x0x7ff7d8ff816c]\nE       \t(No symbol) [0x0x7ff7d9010baa]\nE       \t(No symbol) [0x0x7ff7d90b5d6e]\nE       \t(No symbol) [0x0x7ff7d908cada]\nE       \t(No symbol) [0x0x7ff7d90b4f8b]\nE       \t(No symbol) [0x0x7ff7d908c8b3]\nE       \t(No symbol) [0x0x7ff7d9055272]\nE       \t(No symbol) [0x0x7ff7d9056043]\nE       \tGetHandleVerifier [0x0x7ff7d954b9cd+2946349]\nE       \tGetHandleVerifier [0x0x7ff7d9545c4a+2922410]\nE       \tGetHandleVerifier [0x0x7ff7d95659d7+3052855]\nE       \tGetHandleVerifier [0x0x7ff7d92aaa7e+189918]\nE       \tGetHandleVerifier [0x0x7ff7d92b2a1f+222591]\nE       \tGetHandleVerifier [0x0x7ff7d9298ab4+116244]\nE       \tGetHandleVerifier [0x0x7ff7d9298c69+116681]\nE       \tGetHandleVerifier [0x0x7ff7d927f048+11176]\nE       \tBaseThreadInitThunk [0x0x7ffd3c1be8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffd3dadc34c+44]\n\n.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "description": "Authorization with correct data and minimum length username", "steps": [{"name": "Open login page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=140.0.7339.81)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7d928fc95+79861]\n\tGetHandleVerifier [0x0x7ff7d928fcf0+79952]\n\t(No symbol) [0x0x7ff7d900cada]\n\t(No symbol) [0x0x7ff7d90097e1]\n\t(No symbol) [0x0x7ff7d8ffa339]\n\t(No symbol) [0x0x7ff7d8ffc111]\n\t(No symbol) [0x0x7ff7d8ffa656]\n\t(No symbol) [0x0x7ff7d8ffa0a7]\n\t(No symbol) [0x0x7ff7d8ff9d6b]\n\t(No symbol) [0x0x7ff7d8ff78dc]\n\t(No symbol) [0x0x7ff7d8ff816c]\n\t(No symbol) [0x0x7ff7d9010baa]\n\t(No symbol) [0x0x7ff7d90b5d6e]\n\t(No symbol) [0x0x7ff7d908cada]\n\t(No symbol) [0x0x7ff7d90b4f8b]\n\t(No symbol) [0x0x7ff7d908c8b3]\n\t(No symbol) [0x0x7ff7d9055272]\n\t(No symbol) [0x0x7ff7d9056043]\n\tGetHandleVerifier [0x0x7ff7d954b9cd+2946349]\n\tGetHandleVerifier [0x0x7ff7d9545c4a+2922410]\n\tGetHandleVerifier [0x0x7ff7d95659d7+3052855]\n\tGetHandleVerifier [0x0x7ff7d92aaa7e+189918]\n\tGetHandleVerifier [0x0x7ff7d92b2a1f+222591]\n\tGetHandleVerifier [0x0x7ff7d9298ab4+116244]\n\tGetHandleVerifier [0x0x7ff7d9298c69+116681]\n\tGetHandleVerifier [0x0x7ff7d927f048+11176]\n\tBaseThreadInitThunk [0x0x7ffd3c1be8d7+23]\n\tRtlUserThreadStart [0x0x7ffd3dadc34c+44]\n\n", "trace": "  File \"C:\\Users\\swert\\PycharmProjects\\UI\\.venv1\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\swert\\PycharmProjects\\UI\\pages\\login_page.py\", line 64, in open_login_page\n    self.open_url(Links.LOGIN_PAGE)\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\swert\\PycharmProjects\\UI\\base\\base.py\", line 26, in open_url\n    return self.driver.get(url)\n           ~~~~~~~~~~~~~~~^^^^^\n  File \"C:\\Users\\swert\\PycharmProjects\\UI\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 483, in get\n    self.execute(Command.GET, {\"url\": url})\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\swert\\PycharmProjects\\UI\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 458, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\swert\\PycharmProjects\\UI\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1757518623354, "stop": 1757518628108}], "start": 1757518623354, "stop": 1757518628110, "uuid": "ed67509e-671a-42bc-9211-2872f8f0e7ed", "historyId": "0f5c2bbf081ab65b2ffb6246bfb92e3f", "testCaseId": "0f5c2bbf081ab65b2ffb6246bfb92e3f", "fullName": "tests.test_login_page.TestsLoginPagePositive#test_authorization_correct_data", "labels": [{"name": "epic", "value": "Login Page Positive Tests"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_page"}, {"name": "subSuite", "value": "TestsLoginPagePositive"}, {"name": "host", "value": "DESKTOP-E557KLR"}, {"name": "thread", "value": "9024-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_page"}], "titlePath": ["tests", "test_login_page.py", "TestsLoginPagePositive"]}